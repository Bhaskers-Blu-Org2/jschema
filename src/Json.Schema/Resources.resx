<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorAdditionalPropertiesProhibited" xml:space="preserve">
    <value>The schema does not define a property named "{0}", and the schema does not permit additional properties.</value>
  </data>
  <data name="ErrorDefinitionDoesNotExist" xml:space="preserve">
    <value>This schema does not contain the sub-schema definition referred to by the $ref value "{0}".</value>
  </data>
  <data name="ErrorInvalidAdditionalProperties" xml:space="preserve">
    <value>JSON schema requires the value of "additionalProperties" to be either a Boolean or a schema, but a token of type {0} was seen.</value>
  </data>
  <data name="ErrorNotAllOf" xml:space="preserve">
    <value>The instance did not satisfy all of the {0} schemas specified by "allOf" as required by the schema.</value>
  </data>
  <data name="ErrorNotAMultiple" xml:space="preserve">
    <value>The value {0} is not a multiple of {1} as required by the schema.</value>
  </data>
  <data name="ErrorNotAnyOf" xml:space="preserve">
    <value>The instance did not satisfy any of the {0} schemas specified by "anyOf" as required by the schema.</value>
  </data>
  <data name="ErrorNotAString" xml:space="preserve">
    <value>JSON schema requires the value of the property "{0}" to be a string, but the token is of type {1}.</value>
  </data>
  <data name="ErrorNotOneOf" xml:space="preserve">
    <value>The instance satisfied {0} of the {1} schemas specified by "oneOf", instead of satisfying exactly one of them as required by the schema.</value>
  </data>
  <data name="ErrorOnlyDefinitionFragmentsSupported" xml:space="preserve">
    <value>This partial implementation of JSON Schema only accepts $ref values in the form of fragments that refer to sub-properties of the "definitions" property, for example "#/definitions/def1". The URI reference "{0}" is not supported.</value>
  </data>
  <data name="ErrorRequiredPropertyMissing" xml:space="preserve">
    <value>The required property "{0}" is missing.</value>
  </data>
  <data name="ErrorStringDoesNotMatchPattern" xml:space="preserve">
    <value>The string '{0}' does not match the regular expression '{1}' as required by the schema.</value>
  </data>
  <data name="ErrorStringTooLong" xml:space="preserve">
    <value>The string '{0}' has length {1}, which is greater than the maximum length {2} permitted by the schema.
</value>
  </data>
  <data name="ErrorStringTooShort" xml:space="preserve">
    <value>The string '{0}' has length {1}, which is less than the minimum length {2} permitted by the schema.</value>
  </data>
  <data name="ErrorTooFewArrayItems" xml:space="preserve">
    <value>The schema requires at least {0} array items, but there are only {1}.</value>
  </data>
  <data name="ErrorTooFewProperties" xml:space="preserve">
    <value>The schema requires at least {0} object properties, but there are only {1}.</value>
  </data>
  <data name="ErrorTooManyArrayItems" xml:space="preserve">
    <value>The schema permits at most {0} array items, but there are {1}.</value>
  </data>
  <data name="ErrorTooManyProperties" xml:space="preserve">
    <value>The schema permits at most {0} object properties, but there are {1}.</value>
  </data>
  <data name="ErrorValueTooLarge" xml:space="preserve">
    <value>The value {0} is greater than the maximum value of {1} permitted by the schema.</value>
  </data>
  <data name="ErrorValueTooLargeExclusive" xml:space="preserve">
    <value>The value {0} is greater than or equal to the exclusive maximum value of {1} permitted by the schema.</value>
  </data>
  <data name="ErrorValueTooSmall" xml:space="preserve">
    <value>The value {0} is less than the minimum value of {1} permitted by the schema.</value>
  </data>
  <data name="ErrorValueTooSmallExclusive" xml:space="preserve">
    <value>The value {0} is less than or equal to the exclusive minimum value of {1} permitted by the schema.</value>
  </data>
  <data name="ErrorWithLineInfo" xml:space="preserve">
    <value>({0},{1}): error {2}: {3}</value>
  </data>
  <data name="ErrorWrongType" xml:space="preserve">
    <value>The schema requires '{0}' to be one of the types [{1}], but the schema validator found a token of type {2}.</value>
  </data>
  <data name="ErrorInvalidEnumValue" xml:space="preserve">
    <value>The value '{0}' does not match any of the enum values '{1}'.</value>
  </data>
  <data name="ErrorNotUnique" xml:space="preserve">
    <value>The elements of the are are not unique, as required by the schema.</value>
  </data>
  <data name="ErrorInvalidItemsType" xml:space="preserve">
    <value>JSON schema requires the value of "items" to be either a schema or an array of schemas, but a token of type {0} was seen.</value>
  </data>
  <data name="ErrorTooFewItemSchemas" xml:space="preserve">
    <value>The array has {0} items, but the array of schemas specified by  "items" has only {1} items, and "additionalItems" is not specified to allow additional array items.</value>
  </data>
  <data name="ExceptionNotASingleSchema" xml:space="preserve">
    <value>The schema does not specify a single schema for all array items. Access the per-item schemas through the Schemas property.</value>
  </data>
</root>